{
  "version": 3,
  "sources": ["../../workbox-strategies/utils/messages.js", "../../workbox-strategies/CacheFirst.js", "../../workbox-strategies/plugins/cacheOkAndOpaquePlugin.js", "../../workbox-strategies/NetworkFirst.js", "../../workbox-strategies/StaleWhileRevalidate.js"],
  "sourcesContent": ["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport '../_version.js';\r\nexport const messages = {\r\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\r\n    printFinalResponse: (response) => {\r\n        if (response) {\r\n            logger.groupCollapsed(`View the final response here.`);\r\n            logger.log(response || '[No response returned]');\r\n            logger.groupEnd();\r\n        }\r\n    },\r\n};\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\r\n * request strategy.\r\n *\r\n * A cache first strategy is useful for assets that have been revisioned,\r\n * such as URLs like `/styles/example.a8f5f1.css`, since they\r\n * can be cached for long periods of time.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass CacheFirst extends Strategy {\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'makeRequest',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        let response = await handler.cacheMatch(request);\r\n        let error = undefined;\r\n        if (!response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\r\n                    `Will respond with a network request.`);\r\n            }\r\n            try {\r\n                response = await handler.fetchAndCachePut(request);\r\n            }\r\n            catch (err) {\r\n                if (err instanceof Error) {\r\n                    error = err;\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (response) {\r\n                    logs.push(`Got response from network.`);\r\n                }\r\n                else {\r\n                    logs.push(`Unable to get a response from the network.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { CacheFirst };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const cacheOkAndOpaquePlugin = {\r\n    /**\r\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\r\n     * 0 (opaque).\r\n     *\r\n     * @param {Object} options\r\n     * @param {Response} options.response\r\n     * @return {Response|null}\r\n     *\r\n     * @private\r\n     */\r\n    cacheWillUpdate: async ({ response }) => {\r\n        if (response.status === 200 || response.status === 0) {\r\n            return response;\r\n        }\r\n        return null;\r\n    },\r\n};\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\r\n * request strategy.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\r\n * Opaque responses are are cross-origin requests where the response doesn't\r\n * support [CORS](https://enable-cors.org/).\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass NetworkFirst extends Strategy {\r\n    /**\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\r\n     * that fail to respond within the timeout will fallback to the cache.\r\n     *\r\n     * This option can be used to combat\r\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\r\n     * scenarios.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\r\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\r\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\r\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\r\n        }\r\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (this._networkTimeoutSeconds) {\r\n                assert.isType(this._networkTimeoutSeconds, 'number', {\r\n                    moduleName: 'workbox-strategies',\r\n                    className: this.constructor.name,\r\n                    funcName: 'constructor',\r\n                    paramName: 'networkTimeoutSeconds',\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'handle',\r\n                paramName: 'makeRequest',\r\n            });\r\n        }\r\n        const promises = [];\r\n        let timeoutId;\r\n        if (this._networkTimeoutSeconds) {\r\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\r\n            timeoutId = id;\r\n            promises.push(promise);\r\n        }\r\n        const networkPromise = this._getNetworkPromise({\r\n            timeoutId,\r\n            request,\r\n            logs,\r\n            handler,\r\n        });\r\n        promises.push(networkPromise);\r\n        const response = await handler.waitUntil((async () => {\r\n            // Promise.race() will resolve as soon as the first promise resolves.\r\n            return ((await handler.waitUntil(Promise.race(promises))) ||\r\n                // If Promise.race() resolved with null, it might be due to a network\r\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\r\n                // the networkPromise resolves instead of returning null.\r\n                // Note that it's fine to await an already-resolved promise, so we don't\r\n                // have to check to see if it's still \"in flight\".\r\n                (await networkPromise));\r\n        })());\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Request} options.request\r\n     * @param {Array} options.logs A reference to the logs array\r\n     * @param {Event} options.event\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    _getTimeoutPromise({ request, logs, handler, }) {\r\n        let timeoutId;\r\n        const timeoutPromise = new Promise((resolve) => {\r\n            const onNetworkTimeout = async () => {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logs.push(`Timing out the network response at ` +\r\n                        `${this._networkTimeoutSeconds} seconds.`);\r\n                }\r\n                resolve(await handler.cacheMatch(request));\r\n            };\r\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\r\n        });\r\n        return {\r\n            promise: timeoutPromise,\r\n            id: timeoutId,\r\n        };\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {number|undefined} options.timeoutId\r\n     * @param {Request} options.request\r\n     * @param {Array} options.logs A reference to the logs Array.\r\n     * @param {Event} options.event\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\r\n        let error;\r\n        let response;\r\n        try {\r\n            response = await handler.fetchAndCachePut(request);\r\n        }\r\n        catch (fetchError) {\r\n            if (fetchError instanceof Error) {\r\n                error = fetchError;\r\n            }\r\n        }\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (response) {\r\n                logs.push(`Got response from network.`);\r\n            }\r\n            else {\r\n                logs.push(`Unable to get a response from the network. Will respond ` +\r\n                    `with a cached response.`);\r\n            }\r\n        }\r\n        if (error || !response) {\r\n            response = await handler.cacheMatch(request);\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (response) {\r\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\r\n                }\r\n                else {\r\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\r\n                }\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { NetworkFirst };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\r\n * request strategy.\r\n *\r\n * Resources are requested from both the cache and the network in parallel.\r\n * The strategy will respond with the cached version if available, otherwise\r\n * wait for the network response. The cache is updated with the network response\r\n * with each successful request.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\r\n * Opaque responses are cross-origin requests where the response doesn't\r\n * support [CORS](https://enable-cors.org/).\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass StaleWhileRevalidate extends Strategy {\r\n    /**\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\r\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\r\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\r\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\r\n            // Swallow this error because a 'no-response' error will be thrown in\r\n            // main handler return flow. This will be in the `waitUntil()` flow.\r\n        });\r\n        void handler.waitUntil(fetchAndCachePromise);\r\n        let response = await handler.cacheMatch(request);\r\n        let error;\r\n        if (response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\r\n                    ` cache. Will update with the network response in the background.`);\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\r\n                    `Will wait for the network response.`);\r\n            }\r\n            try {\r\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\r\n                // https://github.com/microsoft/TypeScript/issues/20006\r\n                response = (await fetchAndCachePromise);\r\n            }\r\n            catch (err) {\r\n                if (err instanceof Error) {\r\n                    error = err;\r\n                }\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { StaleWhileRevalidate };\r\n"],
  "mappings": "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",
  "names": []
}
