{
  "version": 3,
  "sources": ["../../workbox-precaching/addPlugins.js", "../../workbox-precaching/utils/removeIgnoredSearchParams.js", "../../workbox-precaching/utils/generateURLVariations.js", "../../workbox-precaching/PrecacheRoute.js", "../../workbox-precaching/addRoute.js", "../../workbox-precaching/utils/deleteOutdatedCaches.js", "../../workbox-precaching/cleanupOutdatedCaches.js", "../../workbox-precaching/createHandlerBoundToURL.js", "../../workbox-precaching/getCacheKeyForURL.js", "../../workbox-precaching/precache.js", "../../workbox-precaching/precacheAndRoute.js", "../../workbox-precaching/PrecacheFallbackPlugin.js"],
  "sourcesContent": ["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Adds plugins to the precaching strategy.\r\n *\r\n * @param {Array<Object>} plugins\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction addPlugins(plugins) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.strategy.plugins.push(...plugins);\r\n}\r\nexport { addPlugins };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { Route } from 'workbox-routing/Route.js';\r\nimport { generateURLVariations } from './utils/generateURLVariations.js';\r\nimport './_version.js';\r\n/**\r\n * A subclass of {@link workbox-routing.Route} that takes a\r\n * {@link workbox-precaching.PrecacheController}\r\n * instance and uses it to match incoming requests and handle fetching\r\n * responses from the precache.\r\n *\r\n * @memberof workbox-precaching\r\n * @extends workbox-routing.Route\r\n */\r\nclass PrecacheRoute extends Route {\r\n    /**\r\n     * @param {PrecacheController} precacheController A `PrecacheController`\r\n     * instance used to both match requests and respond to fetch events.\r\n     * @param {Object} [options] Options to control how requests are matched\r\n     * against the list of precached URLs.\r\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n     * appending the `directoryIndex` value.\r\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\r\n     * array of regex's to remove search params when looking for a cache match.\r\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n     * check the cache for the URL with a `.html` added to the end of the end.\r\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\r\n     * This is a function that should take a URL and return an array of\r\n     * alternative URLs that should be checked for precache matches.\r\n     */\r\n    constructor(precacheController, options) {\r\n        const match = ({ request, }) => {\r\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n            for (const possibleURL of generateURLVariations(request.url, options)) {\r\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\r\n                if (cacheKey) {\r\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\r\n                    return { cacheKey, integrity };\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\r\n            }\r\n            return;\r\n        };\r\n        super(match, precacheController.strategy);\r\n    }\r\n}\r\nexport { PrecacheRoute };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { PrecacheRoute } from './PrecacheRoute.js';\r\nimport './_version.js';\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\r\n * options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const precacheRoute = new PrecacheRoute(precacheController, options);\r\n    registerRoute(precacheRoute);\r\n}\r\nexport { addRoute };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst SUBSTRING_TO_FIND = '-precache-';\r\n/**\r\n * Cleans up incompatible precaches that were created by older versions of\r\n * Workbox, by a service worker registered under the current scope.\r\n *\r\n * This is meant to be called as part of the `activate` event.\r\n *\r\n * This should be safe to use as long as you don't include `substringToFind`\r\n * (defaulting to `-precache-`) in your non-precache cache names.\r\n *\r\n * @param {string} currentPrecacheName The cache name currently in use for\r\n * precaching. This cache won't be deleted.\r\n * @param {string} [substringToFind='-precache-'] Cache names which include this\r\n * substring will be deleted (excluding `currentPrecacheName`).\r\n * @return {Array<string>} A list of all the cache names that were deleted.\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\r\n    const cacheNames = await self.caches.keys();\r\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\r\n        return (cacheName.includes(substringToFind) &&\r\n            cacheName.includes(self.registration.scope) &&\r\n            cacheName !== currentPrecacheName);\r\n    });\r\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\r\n    return cacheNamesToDelete;\r\n};\r\nexport { deleteOutdatedCaches };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\r\nimport './_version.js';\r\n/**\r\n * Adds an `activate` event listener which will clean up incompatible\r\n * precaches that were created by older versions of Workbox.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction cleanupOutdatedCaches() {\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('activate', ((event) => {\r\n        const cacheName = cacheNames.getPrecacheName();\r\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachesDeleted.length > 0) {\r\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\r\n                        `automatically:`, cachesDeleted);\r\n                }\r\n            }\r\n        }));\r\n    }));\r\n}\r\nexport { cleanupOutdatedCaches };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandlerBoundToURL} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {string} url The precached URL which will be used to lookup the\r\n * `Response`.\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {workbox-routing~handlerCallback}\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction createHandlerBoundToURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.createHandlerBoundToURL(url);\r\n}\r\nexport { createHandlerBoundToURL };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Takes in a URL, and returns the corresponding URL that could be used to\r\n * lookup the entry in the precache.\r\n *\r\n * If a relative URL is provided, the location of the service worker file will\r\n * be used as the base.\r\n *\r\n * For precached entries without revision information, the cache key will be the\r\n * same as the original URL.\r\n *\r\n * For precached entries with revision information, the cache key will be the\r\n * original URL with the addition of a query parameter used for keeping track of\r\n * the revision info.\r\n *\r\n * @param {string} url The URL whose cache key to look up.\r\n * @return {string} The cache key that corresponds to that URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction getCacheKeyForURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.getCacheKeyForURL(url);\r\n}\r\nexport { getCacheKeyForURL };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * {@link workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * {@link workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.precache(entries);\r\n}\r\nexport { precache };\r\n", "/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * {@link workbox-precaching.precache} and\r\n * {@link workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See the\r\n * {@link workbox-precaching.PrecacheRoute} options.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, options) {\r\n    precache(entries);\r\n    addRoute(options);\r\n}\r\nexport { precacheAndRoute };\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\r\n * response to be used when a given strategy is unable to generate a response.\r\n *\r\n * It does this by intercepting the `handlerDidError` plugin callback\r\n * and returning a precached response, taking the expected revision parameter\r\n * into account automatically.\r\n *\r\n * Unless you explicitly pass in a `PrecacheController` instance to the\r\n * constructor, the default instance will be used. Generally speaking, most\r\n * developers will end up using the default.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheFallbackPlugin {\r\n    /**\r\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\r\n     *\r\n     * @param {Object} config\r\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\r\n     *     if the associated strategy can't generate a response.\r\n     * @param {PrecacheController} [config.precacheController] An optional\r\n     *     PrecacheController instance. If not provided, the default\r\n     *     PrecacheController will be used.\r\n     */\r\n    constructor({ fallbackURL, precacheController, }) {\r\n        /**\r\n         * @return {Promise<Response>} The precache response for the fallback URL.\r\n         *\r\n         * @private\r\n         */\r\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\r\n        this._fallbackURL = fallbackURL;\r\n        this._precacheController =\r\n            precacheController || getOrCreatePrecacheController();\r\n    }\r\n}\r\nexport { PrecacheFallbackPlugin };\r\n"],
  "mappings": "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",
  "names": ["cacheNames"]
}
