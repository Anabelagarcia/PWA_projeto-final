{
  "version": 3,
  "sources": ["../../workbox-recipes/_version.js", "../../workbox-recipes/googleFontsCache.js", "../../workbox-recipes/warmStrategyCache.js", "../../workbox-recipes/imageCache.js", "../../workbox-recipes/staticResourceCache.js", "../../workbox-recipes/pageCache.js", "../../workbox-recipes/offlineFallback.js"],
  "sourcesContent": ["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:recipes:7.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies/StaleWhileRevalidate.js';\r\nimport { CacheFirst } from 'workbox-strategies/CacheFirst.js';\r\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\r\nimport { ExpirationPlugin } from 'workbox-expiration/ExpirationPlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of the [Google fonts]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts} caching recipe\r\n *\r\n * @memberof workbox-recipes\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.cachePrefix] Cache prefix for caching stylesheets and webfonts. Defaults to google-fonts\r\n * @param {number} [options.maxAgeSeconds] Maximum age, in seconds, that font entries will be cached for. Defaults to 1 year\r\n * @param {number} [options.maxEntries] Maximum number of fonts that will be cached. Defaults to 30\r\n */\r\nfunction googleFontsCache(options = {}) {\r\n    const sheetCacheName = `${options.cachePrefix || 'google-fonts'}-stylesheets`;\r\n    const fontCacheName = `${options.cachePrefix || 'google-fonts'}-webfonts`;\r\n    const maxAgeSeconds = options.maxAgeSeconds || 60 * 60 * 24 * 365;\r\n    const maxEntries = options.maxEntries || 30;\r\n    // Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.\r\n    registerRoute(({ url }) => url.origin === 'https://fonts.googleapis.com', new StaleWhileRevalidate({\r\n        cacheName: sheetCacheName,\r\n    }));\r\n    // Cache the underlying font files with a cache-first strategy for 1 year.\r\n    registerRoute(({ url }) => url.origin === 'https://fonts.gstatic.com', new CacheFirst({\r\n        cacheName: fontCacheName,\r\n        plugins: [\r\n            new CacheableResponsePlugin({\r\n                statuses: [0, 200],\r\n            }),\r\n            new ExpirationPlugin({\r\n                maxAgeSeconds,\r\n                maxEntries,\r\n            }),\r\n        ],\r\n    }));\r\n}\r\nexport { googleFontsCache };\r\n", "import './_version.js';\r\n/**\r\n * @memberof workbox-recipes\r\n \r\n * @param {Object} options\r\n * @param {string[]} options.urls Paths to warm the strategy's cache with\r\n * @param {Strategy} options.strategy Strategy to use\r\n */\r\nfunction warmStrategyCache(options) {\r\n    self.addEventListener('install', (event) => {\r\n        const done = options.urls.map((path) => options.strategy.handleAll({\r\n            event,\r\n            request: new Request(path),\r\n        })[1]);\r\n        event.waitUntil(Promise.all(done));\r\n    });\r\n}\r\nexport { warmStrategyCache };\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { warmStrategyCache } from './warmStrategyCache';\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { CacheFirst } from 'workbox-strategies/CacheFirst.js';\r\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\r\nimport { ExpirationPlugin } from 'workbox-expiration/ExpirationPlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of the [image caching recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#caching_images}\r\n *\r\n * @memberof workbox-recipes\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.cacheName] Name for cache. Defaults to images\r\n * @param {RouteMatchCallback} [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'image';\r\n * @param {number} [options.maxAgeSeconds] Maximum age, in seconds, that font entries will be cached for. Defaults to 30 days\r\n * @param {number} [options.maxEntries] Maximum number of images that will be cached. Defaults to 60\r\n * @param {WorkboxPlugin[]} [options.plugins] Additional plugins to use for this recipe\r\n * @param {string[]} [options.warmCache] Paths to call to use to warm this cache\r\n */\r\nfunction imageCache(options = {}) {\r\n    const defaultMatchCallback = ({ request }) => request.destination === 'image';\r\n    const cacheName = options.cacheName || 'images';\r\n    const matchCallback = options.matchCallback || defaultMatchCallback;\r\n    const maxAgeSeconds = options.maxAgeSeconds || 30 * 24 * 60 * 60;\r\n    const maxEntries = options.maxEntries || 60;\r\n    const plugins = options.plugins || [];\r\n    plugins.push(new CacheableResponsePlugin({\r\n        statuses: [0, 200],\r\n    }));\r\n    plugins.push(new ExpirationPlugin({\r\n        maxEntries,\r\n        maxAgeSeconds,\r\n    }));\r\n    const strategy = new CacheFirst({\r\n        cacheName,\r\n        plugins,\r\n    });\r\n    registerRoute(matchCallback, strategy);\r\n    // Warms the cache\r\n    if (options.warmCache) {\r\n        warmStrategyCache({ urls: options.warmCache, strategy });\r\n    }\r\n}\r\nexport { imageCache };\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { warmStrategyCache } from './warmStrategyCache';\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies/StaleWhileRevalidate.js';\r\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of the [CSS and JavaScript files recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#cache_css_and_javascript_files}\r\n *\r\n * @memberof workbox-recipes\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.cacheName] Name for cache. Defaults to static-resources\r\n * @param {RouteMatchCallback} [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'style' || request.destination === 'script' || request.destination === 'worker';\r\n * @param {WorkboxPlugin[]} [options.plugins] Additional plugins to use for this recipe\r\n * @param {string[]} [options.warmCache] Paths to call to use to warm this cache\r\n */\r\nfunction staticResourceCache(options = {}) {\r\n    const defaultMatchCallback = ({ request }) => request.destination === 'style' ||\r\n        request.destination === 'script' ||\r\n        request.destination === 'worker';\r\n    const cacheName = options.cacheName || 'static-resources';\r\n    const matchCallback = options.matchCallback || defaultMatchCallback;\r\n    const plugins = options.plugins || [];\r\n    plugins.push(new CacheableResponsePlugin({\r\n        statuses: [0, 200],\r\n    }));\r\n    const strategy = new StaleWhileRevalidate({\r\n        cacheName,\r\n        plugins,\r\n    });\r\n    registerRoute(matchCallback, strategy);\r\n    // Warms the cache\r\n    if (options.warmCache) {\r\n        warmStrategyCache({ urls: options.warmCache, strategy });\r\n    }\r\n}\r\nexport { staticResourceCache };\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { warmStrategyCache } from './warmStrategyCache';\r\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\r\nimport { NetworkFirst } from 'workbox-strategies/NetworkFirst.js';\r\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response/CacheableResponsePlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a page caching recipe with a network timeout\r\n *\r\n * @memberof workbox-recipes\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.cacheName] Name for cache. Defaults to pages\r\n * @param {RouteMatchCallback} [options.matchCallback] Workbox callback function to call to match to. Defaults to request.mode === 'navigate';\r\n * @param {number} [options.networkTimoutSeconds] Maximum amount of time, in seconds, to wait on the network before falling back to cache. Defaults to 3\r\n * @param {WorkboxPlugin[]} [options.plugins] Additional plugins to use for this recipe\r\n * @param {string[]} [options.warmCache] Paths to call to use to warm this cache\r\n */\r\nfunction pageCache(options = {}) {\r\n    const defaultMatchCallback = ({ request }) => request.mode === 'navigate';\r\n    const cacheName = options.cacheName || 'pages';\r\n    const matchCallback = options.matchCallback || defaultMatchCallback;\r\n    const networkTimeoutSeconds = options.networkTimeoutSeconds || 3;\r\n    const plugins = options.plugins || [];\r\n    plugins.push(new CacheableResponsePlugin({\r\n        statuses: [0, 200],\r\n    }));\r\n    const strategy = new NetworkFirst({\r\n        networkTimeoutSeconds,\r\n        cacheName,\r\n        plugins,\r\n    });\r\n    // Registers the route\r\n    registerRoute(matchCallback, strategy);\r\n    // Warms the cache\r\n    if (options.warmCache) {\r\n        warmStrategyCache({ urls: options.warmCache, strategy });\r\n    }\r\n}\r\nexport { pageCache };\r\n", "/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { setCatchHandler } from 'workbox-routing/setCatchHandler.js';\r\nimport { matchPrecache } from 'workbox-precaching/matchPrecache.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of the [comprehensive fallbacks recipe]{@link https://developers.google.com/web/tools/workbox/guides/advanced-recipes#comprehensive_fallbacks}. Be sure to include the fallbacks in your precache injection\r\n *\r\n * @memberof workbox-recipes\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.pageFallback] Precache name to match for pag fallbacks. Defaults to offline.html\r\n * @param {string} [options.imageFallback] Precache name to match for image fallbacks.\r\n * @param {string} [options.fontFallback] Precache name to match for font fallbacks.\r\n */\r\nfunction offlineFallback(options = {}) {\r\n    const pageFallback = options.pageFallback || 'offline.html';\r\n    const imageFallback = options.imageFallback || false;\r\n    const fontFallback = options.fontFallback || false;\r\n    self.addEventListener('install', (event) => {\r\n        const files = [pageFallback];\r\n        if (imageFallback) {\r\n            files.push(imageFallback);\r\n        }\r\n        if (fontFallback) {\r\n            files.push(fontFallback);\r\n        }\r\n        event.waitUntil(self.caches\r\n            .open('workbox-offline-fallbacks')\r\n            .then((cache) => cache.addAll(files)));\r\n    });\r\n    const handler = async (options) => {\r\n        const dest = options.request.destination;\r\n        const cache = await self.caches.open('workbox-offline-fallbacks');\r\n        if (dest === 'document') {\r\n            const match = (await matchPrecache(pageFallback)) ||\r\n                (await cache.match(pageFallback));\r\n            return match || Response.error();\r\n        }\r\n        if (dest === 'image' && imageFallback !== false) {\r\n            const match = (await matchPrecache(imageFallback)) ||\r\n                (await cache.match(imageFallback));\r\n            return match || Response.error();\r\n        }\r\n        if (dest === 'font' && fontFallback !== false) {\r\n            const match = (await matchPrecache(fontFallback)) ||\r\n                (await cache.match(fontFallback));\r\n            return match || Response.error();\r\n        }\r\n        return Response.error();\r\n    };\r\n    setCatchHandler(handler);\r\n}\r\nexport { offlineFallback };\r\n"],
  "mappings": "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",
  "names": ["options"]
}
