import {
  CacheFirst,
  NetworkFirst,
  StaleWhileRevalidate
} from "./chunk-7CTLOVZR.js";
import {
  setCatchHandler
} from "./chunk-CZ7W4HCA.js";
import {
  CacheableResponsePlugin
} from "./chunk-G3K3IH66.js";
import {
  matchPrecache
} from "./chunk-V7SEQ6GZ.js";
import "./chunk-JR2DZ4RE.js";
import {
  registerRoute
} from "./chunk-NVKJ7VJZ.js";
import {
  ExpirationPlugin
} from "./chunk-BSHG5NC4.js";
import "./chunk-NIJCLQ32.js";
import "./chunk-C6OCUJR7.js";
import "./chunk-CH2VUBAX.js";

// node_modules/workbox-recipes/_version.js
try {
  self["workbox:recipes:7.0.0"] && _();
} catch (e) {
}

// node_modules/workbox-recipes/googleFontsCache.js
function googleFontsCache(options = {}) {
  const sheetCacheName = `${options.cachePrefix || "google-fonts"}-stylesheets`;
  const fontCacheName = `${options.cachePrefix || "google-fonts"}-webfonts`;
  const maxAgeSeconds = options.maxAgeSeconds || 60 * 60 * 24 * 365;
  const maxEntries = options.maxEntries || 30;
  registerRoute(({ url }) => url.origin === "https://fonts.googleapis.com", new StaleWhileRevalidate({
    cacheName: sheetCacheName
  }));
  registerRoute(({ url }) => url.origin === "https://fonts.gstatic.com", new CacheFirst({
    cacheName: fontCacheName,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds,
        maxEntries
      })
    ]
  }));
}

// node_modules/workbox-recipes/warmStrategyCache.js
function warmStrategyCache(options) {
  self.addEventListener("install", (event) => {
    const done = options.urls.map((path) => options.strategy.handleAll({
      event,
      request: new Request(path)
    })[1]);
    event.waitUntil(Promise.all(done));
  });
}

// node_modules/workbox-recipes/imageCache.js
function imageCache(options = {}) {
  const defaultMatchCallback = ({ request }) => request.destination === "image";
  const cacheName = options.cacheName || "images";
  const matchCallback = options.matchCallback || defaultMatchCallback;
  const maxAgeSeconds = options.maxAgeSeconds || 30 * 24 * 60 * 60;
  const maxEntries = options.maxEntries || 60;
  const plugins = options.plugins || [];
  plugins.push(new CacheableResponsePlugin({
    statuses: [0, 200]
  }));
  plugins.push(new ExpirationPlugin({
    maxEntries,
    maxAgeSeconds
  }));
  const strategy = new CacheFirst({
    cacheName,
    plugins
  });
  registerRoute(matchCallback, strategy);
  if (options.warmCache) {
    warmStrategyCache({ urls: options.warmCache, strategy });
  }
}

// node_modules/workbox-recipes/staticResourceCache.js
function staticResourceCache(options = {}) {
  const defaultMatchCallback = ({ request }) => request.destination === "style" || request.destination === "script" || request.destination === "worker";
  const cacheName = options.cacheName || "static-resources";
  const matchCallback = options.matchCallback || defaultMatchCallback;
  const plugins = options.plugins || [];
  plugins.push(new CacheableResponsePlugin({
    statuses: [0, 200]
  }));
  const strategy = new StaleWhileRevalidate({
    cacheName,
    plugins
  });
  registerRoute(matchCallback, strategy);
  if (options.warmCache) {
    warmStrategyCache({ urls: options.warmCache, strategy });
  }
}

// node_modules/workbox-recipes/pageCache.js
function pageCache(options = {}) {
  const defaultMatchCallback = ({ request }) => request.mode === "navigate";
  const cacheName = options.cacheName || "pages";
  const matchCallback = options.matchCallback || defaultMatchCallback;
  const networkTimeoutSeconds = options.networkTimeoutSeconds || 3;
  const plugins = options.plugins || [];
  plugins.push(new CacheableResponsePlugin({
    statuses: [0, 200]
  }));
  const strategy = new NetworkFirst({
    networkTimeoutSeconds,
    cacheName,
    plugins
  });
  registerRoute(matchCallback, strategy);
  if (options.warmCache) {
    warmStrategyCache({ urls: options.warmCache, strategy });
  }
}

// node_modules/workbox-recipes/offlineFallback.js
function offlineFallback(options = {}) {
  const pageFallback = options.pageFallback || "offline.html";
  const imageFallback = options.imageFallback || false;
  const fontFallback = options.fontFallback || false;
  self.addEventListener("install", (event) => {
    const files = [pageFallback];
    if (imageFallback) {
      files.push(imageFallback);
    }
    if (fontFallback) {
      files.push(fontFallback);
    }
    event.waitUntil(self.caches.open("workbox-offline-fallbacks").then((cache) => cache.addAll(files)));
  });
  const handler = async (options2) => {
    const dest = options2.request.destination;
    const cache = await self.caches.open("workbox-offline-fallbacks");
    if (dest === "document") {
      const match = await matchPrecache(pageFallback) || await cache.match(pageFallback);
      return match || Response.error();
    }
    if (dest === "image" && imageFallback !== false) {
      const match = await matchPrecache(imageFallback) || await cache.match(imageFallback);
      return match || Response.error();
    }
    if (dest === "font" && fontFallback !== false) {
      const match = await matchPrecache(fontFallback) || await cache.match(fontFallback);
      return match || Response.error();
    }
    return Response.error();
  };
  setCatchHandler(handler);
}
export {
  googleFontsCache,
  imageCache,
  offlineFallback,
  pageCache,
  staticResourceCache,
  warmStrategyCache
};
//# sourceMappingURL=workbox-recipes.js.map
